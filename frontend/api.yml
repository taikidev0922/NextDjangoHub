openapi: 3.0.3
info:
  title: ""
  version: 0.0.0
paths:
  /api/v1/auth/login/:
    post:
      operationId: auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Login"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Login"
        required: true
      security:
        - jwtAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JWT"
          description: ""
  /api/v1/auth/logout/:
    post:
      operationId: auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
        - auth
      security:
        - jwtAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestAuthDetail"
          description: ""
  /api/v1/auth/password/change/:
    post:
      operationId: auth_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordChange"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PasswordChange"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PasswordChange"
        required: true
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestAuthDetail"
          description: ""
  /api/v1/auth/password/reset/:
    post:
      operationId: auth_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordReset"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PasswordReset"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PasswordReset"
        required: true
      security:
        - jwtAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestAuthDetail"
          description: ""
  /api/v1/auth/password/reset/confirm/:
    post:
      operationId: auth_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetConfirm"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PasswordResetConfirm"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PasswordResetConfirm"
        required: true
      security:
        - jwtAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestAuthDetail"
          description: ""
  /api/v1/auth/token/refresh/:
    post:
      operationId: auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenRefresh"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TokenRefresh"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TokenRefresh"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenRefresh"
          description: ""
  /api/v1/auth/token/verify/:
    post:
      operationId: auth_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenVerify"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TokenVerify"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TokenVerify"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenVerify"
          description: ""
  /api/v1/auth/user/:
    get:
      operationId: auth_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
        - auth
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetails"
          description: ""
    put:
      operationId: auth_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDetails"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UserDetails"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UserDetails"
        required: true
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetails"
          description: ""
    patch:
      operationId: auth_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedUserDetails"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedUserDetails"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedUserDetails"
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetails"
          description: ""
  /api/v1/sample/:
    get:
      operationId: sample_list
      parameters:
        - in: query
          name: created_at
          schema:
            type: string
            format: date-time
        - in: query
          name: description
          schema:
            type: string
        - in: query
          name: id
          schema:
            type: string
            format: uuid
        - in: query
          name: price
          schema:
            type: integer
        - in: query
          name: price_lte
          schema:
            type: integer
        - in: query
          name: title
          schema:
            type: string
        - in: query
          name: updated_at
          schema:
            type: string
            format: date-time
      tags:
        - sample
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Sample"
          description: ""
    post:
      operationId: sample_create
      tags:
        - sample
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Sample"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Sample"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Sample"
        required: true
      security:
        - jwtAuth: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sample"
          description: ""
  /api/v1/sample/{id}/:
    get:
      operationId: sample_retrieve
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this sample.
          required: true
      tags:
        - sample
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sample"
          description: ""
    put:
      operationId: sample_update
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this sample.
          required: true
      tags:
        - sample
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Sample"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Sample"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Sample"
        required: true
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sample"
          description: ""
    patch:
      operationId: sample_partial_update
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this sample.
          required: true
      tags:
        - sample
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedSample"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedSample"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedSample"
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sample"
          description: ""
    delete:
      operationId: sample_destroy
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this sample.
          required: true
      tags:
        - sample
      security:
        - jwtAuth: []
      responses:
        "204":
          description: No response body
  /api/v1/sample/bulk_update/:
    put:
      operationId: sample_bulk_update_update
      parameters:
        - in: query
          name: created_at
          schema:
            type: string
            format: date-time
        - in: query
          name: description
          schema:
            type: string
        - in: query
          name: id
          schema:
            type: string
            format: uuid
        - in: query
          name: price
          schema:
            type: integer
        - in: query
          name: price_lte
          schema:
            type: integer
        - in: query
          name: title
          schema:
            type: string
        - in: query
          name: updated_at
          schema:
            type: string
            format: date-time
      tags:
        - sample
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Sample"
          application/x-www-form-urlencoded:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Sample"
          multipart/form-data:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Sample"
        required: true
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Sample"
          description: ""
components:
  schemas:
    JWT:
      type: object
      description: Serializer for JWT authentication.
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        user:
          $ref: "#/components/schemas/UserDetails"
      required:
        - access_token
        - refresh_token
        - user
    Login:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - password
    PasswordChange:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
        - new_password1
        - new_password2
    PasswordReset:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
      required:
        - email
    PasswordResetConfirm:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
        uid:
          type: string
        token:
          type: string
      required:
        - new_password1
        - new_password2
        - token
        - uid
    PatchedSample:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        cookie:
          type: integer
        title:
          type: string
          title: タイトル
          maxLength: 10
        description:
          type: string
          nullable: true
          title: 説明
          maxLength: 15
        price:
          type: integer
          nullable: true
          title: 価格
        created_at:
          type: string
          format: date-time
          readOnly: true
          title: 登録日
        updated_at:
          type: string
          format: date-time
          readOnly: true
          title: 更新日
    PatchedUserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        username:
          type: string
          title: ユーザー名
          description: この項目は必須です。半角アルファベット、半角数字、@/./+/-/_ で150文字以下にしてください。
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: メールアドレス
        first_name:
          type: string
          title: 名
          maxLength: 150
        last_name:
          type: string
          title: 姓
          maxLength: 150
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
        - detail
    Sample:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        cookie:
          type: integer
        title:
          type: string
          title: タイトル
          maxLength: 10
        description:
          type: string
          nullable: true
          title: 説明
          maxLength: 15
        price:
          type: integer
          nullable: true
          title: 価格
        created_at:
          type: string
          format: date-time
          readOnly: true
          title: 登録日
        updated_at:
          type: string
          format: date-time
          readOnly: true
          title: 更新日
      required:
        - created_at
        - id
        - title
        - updated_at
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
        - access
        - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
        - token
    UserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        username:
          type: string
          title: ユーザー名
          description: この項目は必須です。半角アルファベット、半角数字、@/./+/-/_ で150文字以下にしてください。
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: メールアドレス
        first_name:
          type: string
          title: 名
          maxLength: 150
        last_name:
          type: string
          title: 姓
          maxLength: 150
      required:
        - email
        - pk
        - username
  securitySchemes:
    jwtAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "JWT"
